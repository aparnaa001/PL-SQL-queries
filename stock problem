CREATE OR REPLACE TRIGGER updatestock 
AFTER INSERT ON transaction 
FOR EACH ROW
BEGIN
   IF :NEW.type = 'purchase' THEN
      UPDATE stock
      SET no_of_pieces_available = no_of_pieces_available + :NEW.no_of_pieces
      WHERE itemid = :NEW.itemid;
   ELSIF :NEW.type = 'sales' THEN
      UPDATE stock
      SET no_of_pieces_available = no_of_pieces_available - :NEW.no_of_pieces
      WHERE itemid = :NEW.itemid AND no_of_pieces_available >= :NEW.no_of_pieces;

      IF SQL%ROWCOUNT = 0 THEN
         RAISE_APPLICATION_ERROR(-20001, 'Not enough stock available');
      END IF;
   END IF;
END;
/


 set serveroutput on
 declare
  r1 varchar2(200);
   begin
   r1:='insert into transaction(tr_id,type,tr_date,itemid,no_of_pieces)values(13,''sales'',to_date(''2022-08-05'',''YYYY-MM-DD''),2,1)';
   execute immediate r1;
   dbms_output.put_line('row inserted');
  exception
  when others then
  dbms_output.put_line('error:'||SQLERRM);
  end;




  set serveroutput on
 declare
  r stock%rowtype;
  begin
  for r in(select * from stock)
loop
dbms_output.put_line(r.stock_no||''||r.itemid||''||r.no_of_pieces_available);
end loop;
end;




--display items on dates
SELECT t.tr_id,
       t.tr_date,
       t.no_of_pieces,
       i.itname,
       i.unitprice,
       (t.no_of_pieces * i.unitprice) AS total_price
FROM transaction t
JOIN item i ON t.itemid = i.itemid
WHERE t.type = 'Sales'
  AND TRUNC(t.tr_date) = TO_DATE('15-FEB-2023', 'DD-MON-YYYY');


--cursor

DECLARE
    CURSOR worker_cursor IS
        SELECT WORKERID, SALARY
        FROM SALARIEDWORKER;
    
    v_workerid SALARIEDWORKER.WORKERID%TYPE;
    v_salary SALARIEDWORKER.SALARY%TYPE;
    v_tax SALARIEDWORKER.TAX%TYPE;
BEGIN
    -- Open the cursor
    OPEN worker_cursor;
    LOOP
        FETCH worker_cursor INTO v_workerid, v_salary;
        EXIT WHEN worker_cursor%NOTFOUND;
        
        -- Calculate tax based on salary ranges
        IF v_salary <= 5000 THEN
            v_tax := 0;
        ELSIF v_salary <= 8000 THEN
            v_tax := v_salary * 0.05;
        ELSIF v_salary <= 10000 THEN
            v_tax := v_salary * 0.10;
        ELSE
            v_tax := v_salary * 0.15;
        END IF;

        -- Update the tax in SALARIEDWORKER
        UPDATE SALARIEDWORKER
        SET TAX = v_tax
        WHERE WORKERID = v_workerid;
    END LOOP;

    -- Close the cursor
    CLOSE worker_cursor;

    DBMS_OUTPUT.PUT_LINE('Tax calculated and updated for all workers.');
END;
/



CREATE OR REPLACE TRIGGER record_retirement
AFTER UPDATE OF RETIRES ON SALARIEDWORKER
FOR EACH ROW
WHEN (NEW.RETIRES = 'Y') -- Trigger only when the worker retires
BEGIN
    -- Insert pension details into the PENSION table
    INSERT INTO PENSION (WORKERID, PENSIONAMOUNT)
    VALUES (:NEW.WORKERID, :NEW.SALARY / 2);

    DBMS_OUTPUT.PUT_LINE('Retirement recorded: Worker ID ' || :NEW.WORKERID || 
                         ', Pension Amount ' || (:NEW.SALARY / 2));
END;
/

--join
select item.*,transaction.tr_date from item join transaction where item.itemid=transaction.itemid and tran
saction.tr_date='2022-01-05';


